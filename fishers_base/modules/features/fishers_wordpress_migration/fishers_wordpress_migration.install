<?php

/**
 *
 */

/**
 * Implements hook_install().
 *
 * Loads the data in the xml file in this module to the database. SQL query used
 * to produce the csv:
 *
 * SELECT wp_ngg_pictures.*, CONCAT('public://', path, '/', filename) as
 * fullpath FROM `wp_ngg_pictures` LEFT JOIN `wp_ngg_gallery` ON galleryid=gid

function fishers_wordpress_migration_install() {
  _fishers_wordpress_migration_add_feed('ghalidrm_albums.csv', 'nextgen_gallery');
  _fishers_wordpress_migration_add_feed('wp_ngg_pictures.csv', 'nextgen_images');
  _fishers_wordpress_migration_add_wp_blog('fisherspdx.wordpress.2013-07-28.xml');
  if(drupal_is_cli()) {
    drush_backend_batch_process();
  }
}
 * 
 */

/**
 * Loads all blog entries from a file within this module.
 */
function _fishers_wordpress_migration_add_wp_blog($filename){
  $directory = 'wordpress://';
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    form_set_error('wxr_file',
      t('Could not prepare directory %directory - make sure your Drupal files directory exists and is writable',
        array('%directory' => $directory)));
    return;
  }

  $tmpfile = drupal_get_path('module', 'fishers_wordpress_migration') . '/' . $filename;
  // Note that for either path we take here, $tmpfile will be the name of
  // the uploaded/retrieved file, and $destination will be the name of the
  // desired final destination.
  if ($tmpfile) {
    // Handle uploaded file
    $destination = $directory . str_replace(' ', '%20', $filename);
  }
  else {
    drupal_set_message('Could not load the wordpress import file.');
  }

  WordPressBlog::preprocessFile($tmpfile, $destination);

  try {
    $blog = wordpress_migrate_blog($destination);
  }
  catch (Exception $e) {
    form_set_error('wxr_file', $e->getMessage());
    file_unmanaged_delete($destination);
    return;
  }

  // Import each migration in order, until done or time is running out
  $operations = array();
  foreach ($blog->migrations() as $migration) {
     $operations[] = array('migrate_ui_batch',
                            array('import', $migration->getMachineName(),
                                  array('unit' => 'items', 'value' => ''), FALSE));
  }

  $batch = array(
    'operations' => $operations,
    'title' => t('WordPress import in progress'),
    'file' => drupal_get_path('module', 'migrate_ui') .
                  '/migrate_ui.pages.inc',
    'init_message' => t('Starting import process'),
    'progress_message' => t(''),
    'error_message' => t('An error occurred. Some or all of the import processing has failed.'),
    'finished' => 'migrate_ui_batch_finish',
  );
  batch_set($batch);


}

/**
 * Loads all galleries from a csv within this module.
 */
function _fishers_wordpress_migration_add_feed($filename, $importer){
  // Loads galleries.
  $form = array('#importer_id' => $importer);

  $csv = file_get_contents(DRUPAL_ROOT . '/' . drupal_get_path('module', 'fishers_wordpress_migration') . '/' . $filename);
  $path = 'private://feeds/' . $filename;
  $file = file_save_data($csv, $path, FILE_EXISTS_REPLACE);

  $form_state = array(
    'programmed' => TRUE,
    'rebuild' => FALSE,
    'submit_handlers' => array('feeds_import_form_submit'),
    'process_input' => TRUE,
    'submitted' => TRUE,
    'values' => array(
      'feeds' => array (
        'FeedsFileFetcher' => array(
          'fid' => $file->fid,
          'source' => $path,
        )
      )
    )
  );

  // Save source and import.
  $source = feeds_source($form['#importer_id']);

  if (!empty($form_state['values']['feeds']) && is_array($form_state['values']['feeds'])) {
    $source->addConfig($form_state['values']['feeds']);
    $source->save();
  }

  // Refresh feed if import on create is selected.
  if ($source->importer->config['import_on_create']) {
    $source->startImport();
  }

  // Add to schedule, make sure importer is scheduled, too.
  $source->schedule();
  $source->importer->schedule();

}
